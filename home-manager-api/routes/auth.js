const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { poolPromise, sql } = require('../config/db');

const SECRET_KEY = process.env.JWT_SECRET || 'your_secret_key';

// POST /api/auth/register
router.post('/api/register', async (req, res) => {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ª–æ–≥—ñ–Ω-–∑–∞–ø–∏—Ç —ñ–∑ —Ç—ñ–ª–æ–º:', req.body);
    const { email, password, userName } = req.body;

  try {
    const pool = await poolPromise;

    const result = await pool.request()
      .input('Email', sql.NVarChar, email)
      .query('SELECT * FROM [User] WHERE Email = @Email');

    if (result.recordset.length > 0) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await pool.request()
      .input('UserName', sql.NVarChar, userName)
      .input('Email', sql.NVarChar, email)
      .input('PasswordHash', sql.NVarChar, hashedPassword)
      .query('INSERT INTO [User] (UserName, Email, PasswordHash) VALUES (@UserName, @Email, @PasswordHash)');

    res.status(201).json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!' });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
  }
});

// POST /api/auth/login
router.post('/api/login', async (req, res) => {
  console.log('üîê –û—Ç—Ä–∏–º–∞–Ω–æ –ª–æ–≥—ñ–Ω-–∑–∞–ø–∏—Ç —ñ–∑ —Ç—ñ–ª–æ–º:', req.body);

  const { email, password } = req.body;

  if (!email || !password) {
    console.warn('‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π email –∞–±–æ –ø–∞—Ä–æ–ª—å');
    return res.status(400).json({ message: 'Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ.' });
  }

  try {
    const pool = await poolPromise;

    const result = await pool.request()
      .input('Email', sql.NVarChar, email)
      .query('SELECT * FROM [User] WHERE Email = @Email');

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É –¥–æ –±–∞–∑–∏:', result.recordset);

    const user = result.recordset[0];
    if (!user) {
      console.warn('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑ email:', email);
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
    }

    const isMatch = await bcrypt.compare(password, user.PasswordHash);
    if (!isMatch) {
      console.warn('üö´ –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', email);
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.' });
    }

    const token = jwt.sign({ userId: user.UserID }, SECRET_KEY, { expiresIn: '1h' });

    console.log('‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è:', email);

    res.status(200).json({
      message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!',
      token,
      userId: user.UserID,
      familyId: user.FamilyID,
      userName: user.UserName
    });

  } catch (error) {
    console.error('üî• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ª–æ–≥—ñ–Ω—É:', error.message, error.stack);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

module.exports = router;
